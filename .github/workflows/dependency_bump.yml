name: Manual Dependency Bump & Release

on:
  workflow_dispatch:
    inputs:
      ref_branch:
        description: "대상 브랜치(ref)"
        required: true
        default: "release/v0.0.0-owen"
      dependency_name:
        description: "업데이트할 의존성 패키지명 (예: viem 또는 @to-nexus/universal-provider)"
        required: true
      dependency_version:
        description: "설치할 버전 (예: 2.36.0)"
        required: true
      filter:
        description: "선택 패키지만 업데이트 (pnpm --filter 값, 비우면 전체)"
        required: false
        default: ""
      environment:
        description: "빌드/릴리스 환경"
        required: true
        type: choice
        options: [dev, stage, prod]
        default: dev
      dry_run:
        description: "검증만 (커밋/태그/릴리스 없음)"
        required: true
        type: choice
        options: ['false','true']
        default: 'false'
      create_release:
        description: "GitHub Release 생성"
        required: true
        type: choice
        options: ['false','true']
        default: 'true'

permissions:
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.dependency_name }}-${{ inputs.dependency_version }}
  cancel-in-progress: true

jobs:
  bump_and_build:
    name: Bump, Build, (optional) Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref_branch }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.5.0

      - name: Pre-align workspace deps (before install)
        run: |
          node scripts/align-workspace-deps.cjs || true
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          if [ -n "$(git status --porcelain)" ]; then
            if [ "${{ inputs.dry_run }}" = "false" ]; then
              git commit -m "chore(deps): pre-align workspace deps"
              git push
            fi
          fi

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Compute version from ref
        id: version
        run: |
          REF_NAME="${GITHUB_REF_NAME}"
          # actions/checkout@v4 with 'ref' keeps GITHUB_REF_NAME as original input ref
          if [ -z "$REF_NAME" ]; then REF_NAME="${{ inputs.ref_branch }}"; fi
          if [[ "$REF_NAME" == release/* ]]; then
            REF_VERSION="${REF_NAME#release/}"
          else
            # fallback: package.json
            REF_VERSION=$(node -e "console.log(require('./package.json').version)")
          fi
          echo "REF_VERSION=${REF_VERSION}" >> $GITHUB_OUTPUT

      - name: Set workspace version to ref
        run: |
          pnpm run workspace:set-version "${{ steps.version.outputs.REF_VERSION }}"
          git add -A
          if [ -n "$(git status --porcelain)" ]; then
            if [ "${{ inputs.dry_run }}" = "false" ]; then
              git commit -m "chore(version): set workspace to ${{ steps.version.outputs.REF_VERSION }}"
              git push
            fi
          fi

      - name: Update dependency version (workspace)
        run: |
          if [ -n "${{ inputs.filter }}" ]; then
            pnpm -r up "${{ inputs.dependency_name }}@${{ inputs.dependency_version }}" -P --filter "${{ inputs.filter }}"
          else
            pnpm -r up "${{ inputs.dependency_name }}@${{ inputs.dependency_version }}" -P
          fi
          git add -A
          if [ -n "$(git status --porcelain)" ]; then
            if [ "${{ inputs.dry_run }}" = "false" ]; then
              git commit -m "chore(deps): bump ${{ inputs.dependency_name }} to ${{ inputs.dependency_version }}"
              git push
            fi
          fi

      - name: Build (internal first, then cdn)
        env:
          APP_VERSION: ${{ steps.version.outputs.REF_VERSION }}
        run: |
          pnpm -w run build --filter '!@reown/appkit-cdn'
          pnpm -w --filter @reown/appkit-cdn run build

      - name: Create tag and GitHub Release
        if: inputs.create_release == 'true' && inputs.dry_run == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: |-
            ${{ inputs.environment == 'prod' && format('release/{0}', steps.version.outputs.REF_VERSION) || format('release/{0}-depbump.{1}.{2}', steps.version.outputs.REF_VERSION, inputs.dependency_name, inputs.dependency_version) }}
          name: |-
            ${{ inputs.environment == 'prod' && format('Release {0}', steps.version.outputs.REF_VERSION) || format('Pre-Release {0} (dep {1}@{2})', steps.version.outputs.REF_VERSION, inputs.dependency_name, inputs.dependency_version) }}
          generate_release_notes: true
          prerelease: ${{ inputs.environment != 'prod' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Dependency Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: ${{ inputs.ref_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.version.outputs.REF_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Bumped: ${{ inputs.dependency_name }}@${{ inputs.dependency_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Env: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dry-run: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY


