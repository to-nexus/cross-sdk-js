name: Cocos Creator Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "배포 환경 선택"
        required: true
        type: choice
        options:
          - dev
          - stage
          - prod
      version:
        description: "배포할 버전 (예: 1.0.0)"
        required: true
        type: string
      dry_run:
        description: "실제 업로드 없이 검증만 수행"
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  workflow_call:
    inputs:
      environment:
        description: "배포 환경 선택"
        required: true
        type: string
      version:
        description: "배포할 버전 (예: 1.0.0)"
        required: true
        type: string
      dry_run:
        description: "실제 업로드 없이 검증만 수행"
        required: false
        default: 'false'
        type: string

permissions:
  id-token: write
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment }}
  cancel-in-progress: true

jobs:
  display_info:
    name: ${{ format('Cocos Creator Deploy | {0} | {1}{2}', inputs.environment, inputs.version, inputs.dry_run == 'true' && ' [DRY-RUN]' || '') }}
    runs-on: ubuntu-latest
    steps:
      - name: Display Workflow Information
        run: |
          echo "## Cocos Creator Deployment Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY

  cocos_deploy:
    name: Build & Deploy Cocos Creator
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.5.0

      - name: Build Cocos Creator Project
        run: |
          cd examples/cocos-creator
          npm run build
          
      - name: List build output
        run: |
          echo "Build output structure:"
          find examples/cocos-creator/dist -type f | head -20

      - name: Debug AWS Variables
        run: |
          echo "Environment: ${{ inputs.environment }}"
          echo "CDN_ACCOUNT_ID: ${{ vars.CDN_ACCOUNT_ID }}"
          echo "OIDC_ROLE_ARN: ${{ vars.OIDC_ROLE_ARN }}"
          echo "AWS_REGION: ${{ vars.AWS_REGION }}"
          echo "Full ARN: arn:aws:iam::${{ vars.CDN_ACCOUNT_ID }}:role/${{ vars.OIDC_ROLE_ARN }}"

      - name: Configure AWS Credentials
        if: inputs.dry_run == 'false'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.CDN_ACCOUNT_ID }}:role/${{ vars.OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set S3 path based on environment
        id: s3_config
        run: |
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            S3_PATH="cocos-creator/${{ inputs.version }}"
            LATEST_PATH="cocos-creator/latest"
            CACHE_CONTROL="public, max-age=31536000, immutable"
            LATEST_CACHE_CONTROL="public, max-age=3600"
          elif [[ "${{ inputs.environment }}" == "stage" ]]; then
            S3_PATH="cocos-creator/stage/${{ inputs.version }}"
            LATEST_PATH="cocos-creator/stage/latest"
            CACHE_CONTROL="public, max-age=86400"
            LATEST_CACHE_CONTROL="public, max-age=1800"
          else
            S3_PATH="cocos-creator/dev/${{ inputs.version }}"
            LATEST_PATH="cocos-creator/dev/latest"
            CACHE_CONTROL="public, max-age=3600"
            LATEST_CACHE_CONTROL="public, max-age=300"
          fi
          
          echo "S3_PATH=${S3_PATH}" >> $GITHUB_OUTPUT
          echo "LATEST_PATH=${LATEST_PATH}" >> $GITHUB_OUTPUT
          echo "CACHE_CONTROL=${CACHE_CONTROL}" >> $GITHUB_OUTPUT
          echo "LATEST_CACHE_CONTROL=${LATEST_CACHE_CONTROL}" >> $GITHUB_OUTPUT
          
          echo "S3 Configuration:"
          echo "- Version Path: ${S3_PATH}"
          echo "- Latest Path: ${LATEST_PATH}"

      - name: Check if version already exists
        if: inputs.dry_run == 'false'
        id: check_version
        run: |
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          S3_PATH="${{ steps.s3_config.outputs.S3_PATH }}"
          
          if aws s3 ls "s3://${BUCKET_NAME}/${S3_PATH}/" > /dev/null 2>&1; then
            echo "VERSION_EXISTS=true" >> $GITHUB_OUTPUT
            echo "⚠️ Version ${{ inputs.version }} already exists in ${{ inputs.environment }}"
          else
            echo "VERSION_EXISTS=false" >> $GITHUB_OUTPUT
            echo "✅ Version ${{ inputs.version }} is new for ${{ inputs.environment }}"
          fi

      - name: Upload web-desktop to S3
        if: inputs.dry_run == 'false' && steps.check_version.outputs.VERSION_EXISTS != 'true'
        run: |
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          S3_PATH="${{ steps.s3_config.outputs.S3_PATH }}"
          CACHE_CONTROL="${{ steps.s3_config.outputs.CACHE_CONTROL }}"
          
          echo "Uploading web-desktop build..."
          aws s3 sync examples/cocos-creator/dist/web-desktop/ \
            "s3://${BUCKET_NAME}/${S3_PATH}/web-desktop/" \
            --delete \
            --cache-control "${CACHE_CONTROL}" \
            --metadata-directive REPLACE

      - name: Upload web-mobile to S3
        if: inputs.dry_run == 'false' && steps.check_version.outputs.VERSION_EXISTS != 'true'
        run: |
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          S3_PATH="${{ steps.s3_config.outputs.S3_PATH }}"
          CACHE_CONTROL="${{ steps.s3_config.outputs.CACHE_CONTROL }}"
          
          echo "Uploading web-mobile build..."
          aws s3 sync examples/cocos-creator/dist/web-mobile/ \
            "s3://${BUCKET_NAME}/${S3_PATH}/web-mobile/" \
            --delete \
            --cache-control "${CACHE_CONTROL}" \
            --metadata-directive REPLACE

      - name: Update latest symlinks
        if: inputs.dry_run == 'false' && steps.check_version.outputs.VERSION_EXISTS != 'true'
        run: |
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          S3_PATH="${{ steps.s3_config.outputs.S3_PATH }}"
          LATEST_PATH="${{ steps.s3_config.outputs.LATEST_PATH }}"
          LATEST_CACHE_CONTROL="${{ steps.s3_config.outputs.LATEST_CACHE_CONTROL }}"
          
          echo "Updating latest symlinks..."
          
          # Copy versioned content to latest
          aws s3 sync "s3://${BUCKET_NAME}/${S3_PATH}/web-desktop/" \
            "s3://${BUCKET_NAME}/${LATEST_PATH}/web-desktop/" \
            --delete \
            --cache-control "${LATEST_CACHE_CONTROL}" \
            --metadata-directive REPLACE
            
          aws s3 sync "s3://${BUCKET_NAME}/${S3_PATH}/web-mobile/" \
            "s3://${BUCKET_NAME}/${LATEST_PATH}/web-mobile/" \
            --delete \
            --cache-control "${LATEST_CACHE_CONTROL}" \
            --metadata-directive REPLACE

      - name: Invalidate CloudFront cache
        if: inputs.dry_run == 'false' && steps.check_version.outputs.VERSION_EXISTS != 'true'
        run: |
          S3_PATH="${{ steps.s3_config.outputs.S3_PATH }}"
          LATEST_PATH="${{ steps.s3_config.outputs.LATEST_PATH }}"
          
          echo "Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" \
            --paths "/${S3_PATH}/*" "/${LATEST_PATH}/*"

      - name: Deployment summary
        run: |
          echo "## 🎮 Cocos Creator Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Path**: ${{ steps.s3_config.outputs.S3_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Path**: ${{ steps.s3_config.outputs.LATEST_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.dry_run }}" == "false" && "${{ steps.check_version.outputs.VERSION_EXISTS }}" != "true" ]]; then
            BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
            if [[ -n "${BUCKET_NAME}" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔗 Deployed URLs" >> $GITHUB_STEP_SUMMARY
              echo "- **Web Desktop**: https://${BUCKET_NAME}/${{ steps.s3_config.outputs.S3_PATH }}/web-desktop/" >> $GITHUB_STEP_SUMMARY
              echo "- **Web Mobile**: https://${BUCKET_NAME}/${{ steps.s3_config.outputs.S3_PATH }}/web-mobile/" >> $GITHUB_STEP_SUMMARY
              echo "- **Latest Desktop**: https://${BUCKET_NAME}/${{ steps.s3_config.outputs.LATEST_PATH }}/web-desktop/" >> $GITHUB_STEP_SUMMARY
              echo "- **Latest Mobile**: https://${BUCKET_NAME}/${{ steps.s3_config.outputs.LATEST_PATH }}/web-mobile/" >> $GITHUB_STEP_SUMMARY
            fi
          elif [[ "${{ steps.check_version.outputs.VERSION_EXISTS }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Version already exists** - deployment skipped" >> $GITHUB_STEP_SUMMARY
          fi
