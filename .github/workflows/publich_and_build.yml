name: CI - Publish & Build

on:
  push:
    branches:
      - main
      - ci/*
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  # sonarqube:
  #   name: SonarQube Analysis
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: SonarQube Scan
  #       uses: SonarSource/sonarqube-scan-action@v5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #
  # publish_npm:
  #   name: Publish to Nexus NPM
  #   needs: sonarqube
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/ci/'))
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20.x"
  #
  #     - name: Configure npm for Nexus
  #       run: |
  #         echo "//${NEXUS_REGISTRY_URL#https://}:_auth=${{ secrets.NEXUS_CREDENTIALS_BASE64 }}" > .npmrc
  #         echo "@to-nexus:registry=${{ secrets.NEXUS_REGISTRY_URL }}" >> .npmrc
  #       env:
  #         NEXUS_REGISTRY_URL: ${{ secrets.NEXUS_REGISTRY_URL }}
  #
  #     - name: Verify npm authentication
  #       run: cat .npmrc
  #
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: 9.5.0
  #
  #     - name: Install dependencies
  #       run: pnpm install
  #
  #     - name: Build packages
  #       run: pnpm run build
  #
  #     - name: Publish package to Nexus
  #       run: pnpm run publish:latest
  #       env:
  #         NEXUS_REGISTRY_URL: ${{ secrets.NEXUS_REGISTRY_URL }}
  #
  build_and_push:
    name: Build and Push Docker Image
    needs: publish_npm
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/ci/'))
    runs-on: ubuntu-latest

    environment: 'prod'

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure npm for Nexus
        run: |
          echo "//${NEXUS_REGISTRY_URL#https://}:_auth=${{ secrets.NEXUS_CREDENTIALS_BASE64 }}" > .npmrc
          echo "@to-nexus:registry=${{ secrets.NEXUS_REGISTRY_URL }}" >> .npmrc
        env:
          NEXUS_REGISTRY_URL: ${{ secrets.NEXUS_REGISTRY_URL }}

      - name: Get Service Name
        id: env
        run: |
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          echo "SERVICE_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "GIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "ECR_REPO=dev/${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/${{ vars.OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/test/${{ steps.env.outputs.SERVICE_NAME }}:${{ steps.env.outputs.GIT_SHA }}
            ${{ steps.login-ecr.outputs.registry }}/test/${{ steps.env.outputs.SERVICE_NAME }}:latest
          platforms: linux/amd64
          build-args: |
            WORKDIR=/nexus/apps/${{ steps.env.outputs.SERVICE_NAME }}
            SERVICE_NAME=${{ steps.env.outputs.SERVICE_NAME }}
            VITE_PROJECT_ID=${{ secrets.VITE_PROJECT_ID }}
          secrets: |
            github_token=${{ secrets.READ_ONLY_REPO }}
            npmrc=./.npmrc
