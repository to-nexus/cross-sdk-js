name: CI - CDN Publish

on:
  push:
    branches:
      - main
      # - "ci/*"
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: read

jobs:
  cdn_upload:
    name: Build and Upload CDN to S3
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/ci/'))
    runs-on: ubuntu-latest
    
    environment: 'prod'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Extract version from package.json
        id: extract_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: ${VERSION}"

      - name: Check if version changed from previous commit
        id: version_changed
        run: |
          # 🚧 TEMPORARILY DISABLED FOR TESTING 🚧
          # 테스트를 위해 버전 체크 비활성화 - 항상 true로 설정
          echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          echo "PREV_VERSION=test" >> $GITHUB_OUTPUT
          echo "⚠️ Version change check temporarily disabled for testing"
          
          # # 이전 커밋의 버전 추출
          # git fetch --depth=2 origin ${{ github.ref_name }}
          # if git show HEAD^:package.json > /dev/null 2>&1; then
          #   PREV_VERSION=$(git show HEAD^:package.json | node -e "const fs=require('fs'); const stdin=fs.readFileSync(0,'utf8'); console.log(JSON.parse(stdin).version)")
          #   echo "Previous version: ${PREV_VERSION}"
          #   echo "PREV_VERSION=${PREV_VERSION}" >> $GITHUB_OUTPUT
          #   
          #   # 현재 버전과 이전 버전 비교
          #   CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          #   if [ "${CURRENT_VERSION}" != "${PREV_VERSION}" ]; then
          #     echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          #     echo "✅ Version changed from ${PREV_VERSION} to ${CURRENT_VERSION}"
          #   else
          #     echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          #     echo "ℹ️ Version unchanged: ${CURRENT_VERSION}"
          #   fi
          # else
          #   echo "No previous commit found, treating as new version"
          #   echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          #   echo "PREV_VERSION=" >> $GITHUB_OUTPUT
          # fi

      - name: Configure AWS Credentials
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.CDN_ACCOUNT_ID }}:role/${{ vars.OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check existing versions in S3
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true'
        id: check_versions
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          
          # S3에서 기존 버전들 확인
          echo "Checking existing versions in S3..."
          aws s3 ls s3://${BUCKET_NAME}/cross-sdk/ --recursive | grep -E "cross-sdk/[0-9]+\.[0-9]+\.[0-9]+" | sed -E 's/.*cross-sdk\/([0-9]+\.[0-9]+\.[0-9]+)\/.*/\1/' | sort -V | uniq > existing_versions.txt
          
          if [ -s existing_versions.txt ]; then
            echo "Existing versions:"
            cat existing_versions.txt
            LATEST_VERSION=$(tail -n 1 existing_versions.txt)
            echo "LATEST_S3_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT
            
            # 현재 버전이 S3의 최신 버전과 같은지 확인
            if [ "${CURRENT_VERSION}" = "${LATEST_VERSION}" ]; then
              echo "VERSION_EXISTS=true" >> $GITHUB_OUTPUT
              echo "Current version ${CURRENT_VERSION} already exists in S3"
            else
              echo "VERSION_EXISTS=false" >> $GITHUB_OUTPUT
              echo "Current version ${CURRENT_VERSION} is new"
            fi
            
            # 현재 버전이 최신 버전보다 큰지 확인 (semantic version 비교)
            if printf '%s\n%s\n' "${LATEST_VERSION}" "${CURRENT_VERSION}" | sort -V -C; then
              echo "IS_NEWER=true" >> $GITHUB_OUTPUT
              echo "Current version ${CURRENT_VERSION} is newer than or equal to latest ${LATEST_VERSION}"
            else
              echo "IS_NEWER=false" >> $GITHUB_OUTPUT
              echo "Current version ${CURRENT_VERSION} is older than latest ${LATEST_VERSION}"
            fi
          else
            echo "No existing versions found in S3"
            echo "VERSION_EXISTS=false" >> $GITHUB_OUTPUT
            echo "IS_NEWER=true" >> $GITHUB_OUTPUT
            echo "LATEST_S3_VERSION=" >> $GITHUB_OUTPUT
          fi

      - name: Build CDN packages
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true' && steps.check_versions.outputs.VERSION_EXISTS == 'false' && steps.check_versions.outputs.IS_NEWER == 'true'
        run: |
          echo "Building CDN packages..."
          pnpm run build
          
          # CDN 패키지 빌드 확인
          if [ -d "packages/cdn/dist" ]; then
            echo "CDN build successful"
            ls -la packages/cdn/dist/
          else
            echo "CDN build failed - dist directory not found"
            exit 1
          fi

      - name: Upload to S3 with version prefix
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true' && steps.check_versions.outputs.VERSION_EXISTS == 'false' && steps.check_versions.outputs.IS_NEWER == 'true'
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          
          echo "Uploading CDN files to S3..."
          
          # 버전별 디렉토리에 업로드
          aws s3 sync packages/cdn/dist/ s3://${BUCKET_NAME}/cross-sdk/${CURRENT_VERSION}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --metadata-directive REPLACE
          
          echo "Upload to cross-sdk/${CURRENT_VERSION}/ completed"

      - name: Update latest if current version is newest
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true' && steps.check_versions.outputs.VERSION_EXISTS == 'false' && steps.check_versions.outputs.IS_NEWER == 'true'
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
          
          echo "Current version ${CURRENT_VERSION} is the latest, updating latest directory..."
          
          # latest 디렉토리에 복사
          aws s3 sync s3://${BUCKET_NAME}/cross-sdk/${CURRENT_VERSION}/ s3://${BUCKET_NAME}/cross-sdk/latest/ \
            --delete \
            --cache-control "public, max-age=3600" \
            --metadata-directive REPLACE
          
          echo "Update to cross-sdk/latest/ completed"

      - name: Invalidate CloudFront cache
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true' && steps.check_versions.outputs.VERSION_EXISTS == 'false' && steps.check_versions.outputs.IS_NEWER == 'true'
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          DISTRIBUTION_ID="${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}"
          
          echo "Invalidating CloudFront cache..."
          
          # 버전별 경로 무효화
          INVALIDATION_PATHS="/cross-sdk/${CURRENT_VERSION}/*"
          
          # latest도 업데이트된 경우 latest 경로도 무효화
          if [ "${{ steps.check_versions.outputs.IS_NEWER }}" = "true" ]; then
            INVALIDATION_PATHS="${INVALIDATION_PATHS} /cross-sdk/latest/*"
          fi
          
          aws cloudfront create-invalidation \
            --distribution-id ${DISTRIBUTION_ID} \
            --paths ${INVALIDATION_PATHS}
          
          echo "CloudFront invalidation completed for paths: ${INVALIDATION_PATHS}"

      - name: Upload summary
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true' && steps.check_versions.outputs.VERSION_EXISTS == 'false' && steps.check_versions.outputs.IS_NEWER == 'true'
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          echo "## CDN Upload Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${CURRENT_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Path:** cross-sdk/${CURRENT_VERSION}/" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_versions.outputs.IS_NEWER }}" = "true" ]; then
            echo "- **Latest Updated:** Yes (cross-sdk/latest/)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Latest Updated:** No (newer version exists)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **CloudFront:** Cache invalidated" >> $GITHUB_STEP_SUMMARY

      - name: Skip upload - Version unchanged
        if: steps.version_changed.outputs.VERSION_CHANGED == 'false'
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          PREV_VERSION="${{ steps.version_changed.outputs.PREV_VERSION }}"
          echo "## CDN Upload Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- **Reason:** Version unchanged (${CURRENT_VERSION})" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${PREV_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** No upload or invalidation performed" >> $GITHUB_STEP_SUMMARY

      - name: Skip upload - Version exists in S3
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true' && steps.check_versions.outputs.VERSION_EXISTS == 'true'
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          echo "## CDN Upload Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- **Reason:** Version ${CURRENT_VERSION} already exists in S3" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** No upload or invalidation performed" >> $GITHUB_STEP_SUMMARY

      - name: Skip upload - Version is not newer
        if: steps.version_changed.outputs.VERSION_CHANGED == 'true' && steps.check_versions.outputs.VERSION_EXISTS == 'false' && steps.check_versions.outputs.IS_NEWER == 'false'
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.CURRENT_VERSION }}"
          LATEST_VERSION="${{ steps.check_versions.outputs.LATEST_S3_VERSION }}"
          echo "## CDN Upload Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- **Reason:** Current version ${CURRENT_VERSION} is not newer than latest version ${LATEST_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** No upload or invalidation performed" >> $GITHUB_STEP_SUMMARY
