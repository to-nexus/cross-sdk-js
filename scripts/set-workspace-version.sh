#!/bin/bash

# ÌôòÍ≤ΩÎ≥Ñ workspace Î≤ÑÏ†Ñ ÏÑ§Ï†ï Ïä§ÌÅ¨Î¶ΩÌä∏
# Usage: ./scripts/set-workspace-version.sh <environment>

set -e

ENVIRONMENT=${1:-prod}

echo "üîß Setting workspace version for $ENVIRONMENT environment..."

case "$ENVIRONMENT" in
  "dev")
    echo "Using alpha version for dev environment"
    # alpha Î≤ÑÏ†ÑÏùÄ Ïù¥ÎØ∏ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏúºÎØÄÎ°ú Î≥ÄÍ≤Ω ÏóÜÏùå
    ;;
  "stage")
    echo "Setting workspace version to beta for stage environment..."
    # Ïö∞ÏÑ†ÏàúÏúÑ: REGISTRY_URL env > .npmrc(@to-nexus Îß§Ìïë) > .npmrc(auth Ìò∏Ïä§Ìä∏) > ÏóÜÏùå
    if [ -z "$REGISTRY_URL" ] && [ -f ".npmrc" ]; then
      REGISTRY_URL=$(grep "@to-nexus:registry" .npmrc | cut -d'=' -f2 || true)
      if [ -z "$REGISTRY_URL" ]; then
        # ÌÜ†ÌÅ∞ ÎùºÏù∏ÏóêÏÑú Ìò∏Ïä§Ìä∏ Ï∂îÏ∂úÌï¥ Í∏∞Î≥∏ URL Íµ¨ÏÑ±
        AUTH_HOST=$(grep -E '^//[^ ]+:_authToken' .npmrc 2>/dev/null | head -1 | sed -E 's#^//([^/:]+).*#\1#' || true)
        if [ -n "$AUTH_HOST" ]; then
          # dev Î†àÏßÄÏä§Ìä∏Î¶¨ Í≤ΩÎ°úÎ°ú Í∞ÄÏ†ï (stageÎèÑ dev-crossÎ•º ÏÇ¨Ïö©)
          REGISTRY_URL="https://${AUTH_HOST}/repository/dev-cross-sdk-js/"
        fi
      fi
    fi
    # URL Ï†ïÍ∑úÌôî (trailing slash Î≥¥Ïû•)
    if [ -n "$REGISTRY_URL" ] && [ "${REGISTRY_URL: -1}" != "/" ]; then
      REGISTRY_URL="${REGISTRY_URL}/"
    fi
    # ÌÜ†ÌÅ∞ Ï∂îÏ∂ú: env Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ .npmrcÏóêÏÑú ÌòÑÏû¨ Ìò∏Ïä§Ìä∏ Í∏∞Ï§ÄÏúºÎ°ú Ï∂îÏ∂ú
    TOKEN="$NPM_TOKEN"
    if [ -z "$TOKEN" ] && [ -f ".npmrc" ] && [ -n "$REGISTRY_URL" ]; then
      HOST_PATH=${REGISTRY_URL#https://}; HOST_PATH=${HOST_PATH%/}
      TOKEN=$(grep -E "^//${HOST_PATH}/:_authToken=" .npmrc 2>/dev/null | head -1 | cut -d'=' -f2)
      if [ -z "$TOKEN" ]; then
        TOKEN=$(grep -E "^//${HOST_PATH}:_authToken=" .npmrc 2>/dev/null | head -1 | cut -d'=' -f2)
      fi
      if [ -z "$TOKEN" ]; then
        TOKEN=$(grep -E '^//[^ ]+/:_authToken=' .npmrc 2>/dev/null | head -1 | cut -d'=' -f2)
      fi
      if [ -z "$TOKEN" ]; then
        TOKEN=$(grep -E '^//[^ ]+:_authToken=' .npmrc 2>/dev/null | head -1 | cut -d'=' -f2)
      fi
    fi
    if [ -n "$REGISTRY_URL" ]; then
      echo "Using registry: $REGISTRY_URL"
      if [ -n "$TOKEN" ]; then
        META_RAW=$(curl -s -H "Authorization: Bearer ${TOKEN}" "${REGISTRY_URL}%40to-nexus%2Fsdk" 2>/dev/null || echo "")
      else
        META_RAW=$(curl -s "${REGISTRY_URL}%40to-nexus%2Fsdk" 2>/dev/null || echo "")
      fi
    else
      echo "Registry URL not available; defaulting to stable"
      META_RAW=""
    fi
    node -e "
const fs = require('fs');
let metaStr = process.env.META_RAW || ''; 
let meta = {}; try { meta = JSON.parse(metaStr || '{}'); } catch (e) {}
const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const baseVersion = pkg.version.replace(/-alpha.*$/, '').replace(/-beta.*$/, '');
const candidate = baseVersion + '-beta';
const distTags = (meta && meta['dist-tags']) || {};
const versions = (meta && meta.versions) || {};
const hasBeta = (distTags.beta === candidate) || Object.prototype.hasOwnProperty.call(versions, candidate);
if (hasBeta) {
  const betaVersion = candidate;
  console.log('‚úÖ Beta version exists in registry, using:', betaVersion);
  pkg.version = betaVersion;
} else {
  console.log('‚ö†Ô∏è  Beta version not found, using stable:', baseVersion);
  pkg.version = baseVersion;
}
fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
console.log('Workspace version set to:', pkg.version);
" META_RAW="$META_RAW"
    ;;
  "prod")
    echo "Setting stable version for production..."
    node -e "
      const fs = require('fs');
      const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      pkg.version = pkg.version.replace(/-alpha.*$/, '').replace(/-beta.*$/, '');
      fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
      console.log('Workspace version updated to:', pkg.version);
    "
    ;;
  *)
    echo "‚ùå Invalid environment: $ENVIRONMENT"
    echo "Valid options: dev, stage, prod"
    exit 1
    ;;
esac

echo "‚úÖ Workspace version configuration completed for $ENVIRONMENT"
